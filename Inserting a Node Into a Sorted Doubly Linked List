#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();

typedef struct DoublyLinkedListNode DoublyLinkedListNode;
typedef struct DoublyLinkedList DoublyLinkedList;

struct DoublyLinkedListNode {
    int data;
    DoublyLinkedListNode* next;
    DoublyLinkedListNode* prev;
};

struct DoublyLinkedList {
    DoublyLinkedListNode* head;
    DoublyLinkedListNode* tail;
};

DoublyLinkedListNode* create_doubly_linked_list_node(int node_data) {
    DoublyLinkedListNode* node = malloc(sizeof(DoublyLinkedListNode));

    node->data = node_data;
    node->next = NULL;
    node->prev = NULL;

    return node;
}

void insert_node_into_doubly_linked_list(DoublyLinkedList** doubly_linked_list, int node_data) {
    DoublyLinkedListNode* node = create_doubly_linked_list_node(node_data);

    if (!(*doubly_linked_list)->head) {
        (*doubly_linked_list)->head = node;
    } else {
        (*doubly_linked_list)->tail->next = node;
        node->prev = (*doubly_linked_list)->tail;
    }

    (*doubly_linked_list)->tail = node;
}

void print_doubly_linked_list(DoublyLinkedListNode* node, char* sep, FILE* fptr) {
    while (node) {
        fprintf(fptr, "%d", node->data);

        node = node->next;

        if (node) {
            fprintf(fptr, "%s", sep);
        }
    }
}

void free_doubly_linked_list(DoublyLinkedListNode* node) {
    while (node) {
        DoublyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}

// Complete the sortedInsert function below.

/*
 * For your reference:
 *
 * DoublyLinkedListNode {
 *     int data;
 *     DoublyLinkedListNode* next;
 *     DoublyLinkedListNode* prev;
 * };
 *
 */
DoublyLinkedListNode* sortedInsert(DoublyLinkedListNode* head, int data) {
 DoublyLinkedListNode* newNode = malloc(sizeof(DoublyLinkedListNode));
   // Node *newNode = (Node*) malloc(sizeof(Node)); 
   //Set the data of newNode as data
   newNode->data = data; 
   //Now we need to update the next and prev pointers of newNode -
   //based on its position
   if(head == NULL) {
       //Base case : If the list is empty
       newNode->next = NULL; //Set next and prev pointers as NULL
       newNode->prev = NULL;
       //This node now becomes the head node(the only node), so return it.
       return newNode;
   }
   if(head->data >= newNode->data) {
       //If the node's position is in the beginning of the list
       //set the next pointer of the newNode to point to the currentHead
       newNode->next = head; 
       newNode->prev = NULL; //Because it is the beginning of the list
       //Update the prev pointer of the current head to point to newNode
       head->prev = newNode; 
       //This node now becomes the head node, so make it.
       head = newNode;
   } else {
       //Find the position of the new node using a temporary current Node
      DoublyLinkedListNode* current = head;
       while(current->next != NULL && current->next->data < newNode->data) {
           current = current->next;
       }
       //newNode lies between current and current->next
       newNode->prev = current;
       newNode->next = current->next;
       //It might happen that newNode's position is at the end. 
       //In that case we cannot update the current->next's (which is NULL) 
       //prev pointer
       if(current->next != NULL) {
           current->next->prev = newNode;
       }
       //Update the next pointer of current to point to this new node.
       current->next = newNode; 
   } 
   // return the head pointer.
   return head;

}

int main()
